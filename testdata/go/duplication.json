{
  "source": {
    "name": "super lint",
    "url": "https://github.com/reviewdog/reviewdog/blob/master/proto/rdf/jsonschema/DiagnosticResult.jsonschema"
  },
  "severity": "WARNING",
  "diagnostics": [
    {
      "severity": "WARNING",
      "message": "found 93.55 % duplication in testdata/go/input/file2.go#L1-L30 from testdata/go/input/file1.go#L1-L30.",
      "location": {
        "path": "testdata/go/input/file1.go",
        "range": {
          "start": {
            "line": 1,
            "column": 1
          },
          "end": {
            "line": 30,
            "column": 8
          }
        }
      },
      "original_output": "package bfs\n\nimport (\n\t\"github.com/arnauddri/algorithms/algorithms/graphs/bfs\"\n\t\"github.com/arnauddri/algorithms/data-structures/graph\"\n)\n\nfunc ShortestPath(g *graph.DirGraph, start graph.VertexId) (dist map[graph.VertexId]int) {\n\tdist = make(map[graph.VertexId]int)\n\tvisited := make(map[graph.VertexId]bool)\n\n\tgetDist := func(v graph.VertexId) {\n\t\tneighbours := g.GetNeighbours(v).VerticesIter()\n\t\tvisited[v] = true\n\n\t\tfor neighbour := range neighbours {\n\n\t\t\tok, _ := visited[neighbour]\n\t\t\tif !ok {\n\t\t\t\tdist[neighbour] = dist[v] + 1\n\t\t\t}\n\t\t}\n\t}\n\n\tbfs.Bfs(g, start, getDist)\n\n\treturn\n}\n\nfunc GetDist"
    }
  ]
}
